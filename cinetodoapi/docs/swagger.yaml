basePath: /
definitions:
  auth.UserResponse:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
  controller.UpdateRequest:
    properties:
      seen:
        type: boolean
    type: object
  controller.UserMovieResponse:
    properties:
      director:
        type: string
      id:
        type: integer
      originalTitle:
        type: string
      posterPath:
        type: string
      seen:
        type: boolean
      title:
        type: string
      year:
        type: integer
    type: object
  model.Login:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.Movie:
    properties:
      director:
        type: string
      id:
        type: integer
      originalTitle:
        type: string
      posterPath:
        type: string
      title:
        type: string
      year:
        type: integer
    type: object
info:
  contact: {}
  description: API for managing user movie lists.
  title: Cinetodo API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - auth
  /movie:
    get:
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Movie'
            type: array
      security:
      - Bearer: []
      summary: Search movies
      tags:
      - movie
  /user:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserResponse'
      security:
      - Bearer: []
      summary: Get current user
      tags:
      - user
    post:
      consumes:
      - application/json
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create user
      tags:
      - auth
  /user/{userID}/movie:
    get:
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.UserMovieResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List movies for user
      tags:
      - movie
  /user/movie:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.UserMovieResponse'
            type: array
      security:
      - Bearer: []
      summary: List current user movies
      tags:
      - movie
  /user/movie/{movieID}:
    delete:
      parameters:
      - description: Movie ID
        in: path
        name: movieID
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete movie from current user
      tags:
      - movie
    patch:
      parameters:
      - description: Movie ID
        in: path
        name: movieID
        required: true
        type: integer
      - description: Update payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Update movie for current user
      tags:
      - movie
    post:
      parameters:
      - description: Movie ID
        in: path
        name: movieID
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Add movie to current user
      tags:
      - movie
securityDefinitions:
  Bearer:
    description: 'Provide your JWT token as: Bearer <token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
